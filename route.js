var path = require( 'path' );var fs = require( 'fs' );var markdown = require( './markdown' );var mimes= require( './mime' );var EXT_NAME = '.markdown';var default_index = 'index';var default_encode = 'utf8';function write( response, type, data ) {    var html = markdown.toHTML( data );    response.writeHead( 200, { 'Content-Type': mimes[type]} );    response.write( html, 'binary' );    response.end();}function write404( response ) {    routes['/list']( response, '404' );}function write500( response ) {    routes['/list']( response, '500' );}function staticFile( response, file ) {    var type = path.extname( file );    type = type.slice(1);    console.log( 'statis:', type, file, mimes[type] );    fs.readFile( file, function ( error, data ) {        if ( error ) {            write500( response );            return;        }        else {            response.writeHead( 200, { 'Content-Type': mimes[type]} );            response.write( data, 'binary' );            response.end();        }    });}var routes = {    '/': function (response) {        routes['/list']( response );    },    '/list': function ( response, key ) {        var default_dir = '/list';        var file = path.join( __dirname, default_index + EXT_NAME );        if ( key && key != default_index ) {            file = path.join( __dirname, default_dir, key + EXT_NAME );        }        path.exists( file, function ( isExist ) {            if ( isExist ) {                fs.readFile( file, default_encode, function (error, data) {                    if ( error ) {                        write500( response );                        return;                    }                    write( response, 'html', data );                });                            }            else {                write404( response );            }        });    }};function pass( response, pathname, key ) {    var self = arguments.callee;    key = key || default_index;    var realpath = path.join( __dirname, pathname );        console.log( 'pathname:', pathname );    console.log( 'realpath:', realpath );        // @todo: 判断是否为目录/文件.    path.exists( realpath, function ( isExist ) {        if ( routes[pathname] ) {            routes[pathname]( response, key );            return;        }                    if ( isExist ) {            staticFile( response, realpath );            return;        }        var basename = path.basename( pathname );        var dirname = path.dirname( pathname );        if ( routes[dirname] ) {            routes[dirname]( response, basename );        }        else {            self( response, dirname );        }                });}exports.init = function ( pathname, request, response ) {    pathname = path.normalize( pathname );    pass( response, pathname );};